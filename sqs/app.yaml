# PIPELINE DEFINITION
# Name: irpf
# Description: Convert IRPF .pdf to .xml
# Inputs:
#    inference_server: str
#    milvus_collection: str
#    milvus_password: str
#    milvus_uri: str
#    milvus_username: str
#    model_name: str
#    remove_watermark: bool
#    s3_access_key_id: str
#    s3_bucket: str
#    s3_endpoint_url: str
#    s3_filename: str
#    s3_region: str
#    s3_secret_access_key: str
#    s3_service_name: str
#    storage_class_name: str
components:
  comp-createpvc:
    executorLabel: exec-createpvc
    inputDefinitions:
      parameters:
        access_modes:
          description: 'AccessModes to request for the provisioned PVC. May

            be one or more of ``''ReadWriteOnce''``, ``''ReadOnlyMany''``, ``''ReadWriteMany''``,
            or

            ``''ReadWriteOncePod''``. Corresponds to `PersistentVolumeClaim.spec.accessModes
            <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes>`_.'
          parameterType: LIST
        annotations:
          description: Annotations for the PVC's metadata. Corresponds to `PersistentVolumeClaim.metadata.annotations
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim>`_.
          isOptional: true
          parameterType: STRUCT
        pvc_name:
          description: 'Name of the PVC. Corresponds to `PersistentVolumeClaim.metadata.name
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim>`_.
            Only one of ``pvc_name`` and ``pvc_name_suffix`` can

            be provided.'
          isOptional: true
          parameterType: STRING
        pvc_name_suffix:
          description: 'Prefix to use for a dynamically generated name, which

            will take the form ``<argo-workflow-name>-<pvc_name_suffix>``. Only one

            of ``pvc_name`` and ``pvc_name_suffix`` can be provided.'
          isOptional: true
          parameterType: STRING
        size:
          description: The size of storage requested by the PVC that will be provisioned.
            For example, ``'5Gi'``. Corresponds to `PersistentVolumeClaim.spec.resources.requests.storage
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec>`_.
          parameterType: STRING
        storage_class_name:
          defaultValue: ''
          description: 'Name of StorageClass from which to provision the PV

            to back the PVC. ``None`` indicates to use the cluster''s default

            storage_class_name. Set to ``''''`` for a statically specified PVC.'
          isOptional: true
          parameterType: STRING
        volume_name:
          description: 'Pre-existing PersistentVolume that should back the

            provisioned PersistentVolumeClaim. Used for statically

            specified PV only. Corresponds to `PersistentVolumeClaim.spec.volumeName
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec>`_.'
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        name:
          parameterType: STRING
  comp-deletepvc:
    executorLabel: exec-deletepvc
    inputDefinitions:
      parameters:
        pvc_name:
          description: Name of the PVC to delete. Supports passing a runtime-generated
            name, such as a name provided by ``kubernetes.CreatePvcOp().outputs['name']``.
          parameterType: STRING
  comp-download-document:
    executorLabel: exec-download-document
    inputDefinitions:
      parameters:
        pvc_directory:
          parameterType: STRING
        s3_access_key_id:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint_url:
          parameterType: STRING
        s3_filename:
          parameterType: STRING
        s3_region:
          parameterType: STRING
        s3_secret_access_key:
          parameterType: STRING
        s3_service_name:
          parameterType: STRING
  comp-extract-text:
    executorLabel: exec-extract-text
    inputDefinitions:
      parameters:
        pvc_directory:
          parameterType: STRING
        pvc_filename:
          parameterType: STRING
  comp-index-document:
    executorLabel: exec-index-document
    inputDefinitions:
      parameters:
        milvus_collection:
          parameterType: STRING
        milvus_password:
          parameterType: STRING
        milvus_uri:
          parameterType: STRING
        milvus_username:
          parameterType: STRING
        pvc_directory:
          parameterType: STRING
        pvc_filename:
          parameterType: STRING
  comp-llm:
    executorLabel: exec-llm
    inputDefinitions:
      parameters:
        inference_server:
          parameterType: STRING
        milvus_collection:
          parameterType: STRING
        milvus_password:
          parameterType: STRING
        milvus_uri:
          parameterType: STRING
        milvus_username:
          parameterType: STRING
        model_name:
          parameterType: STRING
        pvc_directory:
          parameterType: STRING
        pvc_filename:
          parameterType: STRING
  comp-remove-watermark:
    executorLabel: exec-remove-watermark
    inputDefinitions:
      parameters:
        pvc_directory:
          parameterType: STRING
        pvc_filename:
          parameterType: STRING
        remove_watermark:
          parameterType: BOOLEAN
  comp-upload-document:
    executorLabel: exec-upload-document
    inputDefinitions:
      parameters:
        pvc_directory:
          parameterType: STRING
        pvc_filename:
          parameterType: STRING
        s3_access_key_id:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint_url:
          parameterType: STRING
        s3_region:
          parameterType: STRING
        s3_secret_access_key:
          parameterType: STRING
        s3_service_name:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-createpvc:
      container:
        image: argostub/createpvc
    exec-deletepvc:
      container:
        image: argostub/deletepvc
    exec-download-document:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_document
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_document(\n    s3_service_name      : str,\n    s3_endpoint_url\
          \      : str,\n    s3_access_key_id     : str,\n    s3_secret_access_key\
          \ : str,\n    s3_region            : str,\n    s3_bucket            : str,\n\
          \    s3_filename          : str,\n    pvc_directory        : str\n):\n \
          \   \"\"\"\n    Downloads the document from the s3 bucket.\n\n    Parameters:\n\
          \        - s3_service_name      (str) : The name of the s3 service. It should\
          \ be 's3'.\n        - s3_endpoint_url      (str) : The url of the s3 endpoint.\n\
          \        - s3_access_key_id     (str) : The access key id for authentication.\n\
          \        - s3_secret_access_key (str) : The secret access key for authentication.\n\
          \        - s3_region            (str) : The region where the s3 bucket is\
          \ located.\n        - s3_bucket            (str) : The s3 bucket where the\
          \ document will be downloaded.\n        - s3_filename          (str) : The\
          \ s3 filename that will be downloaded.\n        - pvc_directory        (str)\
          \ : The PVC directory where the file will be saved.\n    \"\"\"\n\n    import\
          \ boto3\n    import os\n\n    pvc_directory = os.path.join(pvc_directory,\
          \ os.path.dirname(s3_filename))\n    pvc_filename  = os.path.join(pvc_directory,\
          \ os.path.basename(s3_filename))\n\n    os.makedirs(pvc_directory, exist_ok\
          \ = True)\n\n    s3_client = boto3.client(\n        service_name       \
          \   = s3_service_name,\n        endpoint_url          = s3_endpoint_url,\n\
          \        aws_access_key_id     = s3_access_key_id,\n        aws_secret_access_key\
          \ = s3_secret_access_key,\n        region_name           = s3_region\n \
          \   )\n\n    s3_client.download_file(s3_bucket, s3_filename, pvc_filename)\n\
          \n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/boto3
    exec-extract-text:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - extract_text
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef extract_text(\n    pvc_directory : str,\n    pvc_filename  :\
          \ str\n):\n    \"\"\"\n    Extracts the text from the pdf file.\n\n    Parameters:\n\
          \        - pvc_directory (str) : The PVC directory where the file is saved.\n\
          \        - pvc_filename  (str) : The PVC filename in which the text will\
          \ be extracted.\n    \"\"\"\n\n    import os\n    import pandas\n    import\
          \ pdf2image\n    import pytesseract\n\n    pvc_filename = os.path.join(pvc_directory,\
          \ pvc_filename)\n    pvc_filename = '{0}_no_watermark{1}'.format(*os.path.splitext(pvc_filename))\n\
          \n    extracted_text = ''\n\n    for index, image in enumerate(pdf2image.convert_from_path(pvc_filename)):\n\
          \n        ocr_config           = r'-c preserve_interword_spaces=1 --oem\
          \ 1 --psm 1'\n        ocr_data             = pytesseract.image_to_data(image,\
          \ lang = 'por', config = ocr_config, output_type = pytesseract.Output.DICT)\n\
          \        ocr_dataframe        = pandas.DataFrame(ocr_data)\n        cleaned_df\
          \           = ocr_dataframe[(ocr_dataframe.conf != '-1') & (ocr_dataframe.text\
          \ != ' ') & (ocr_dataframe.text != '')]\n        sorted_block_numbers =\
          \ cleaned_df.groupby('block_num').first().sort_values('top').index.tolist()\n\
          \n        for block_num in sorted_block_numbers:\n\n            current_block\
          \  = cleaned_df[cleaned_df['block_num'] == block_num]\n            filtered_text\
          \  = current_block[current_block.text.str.len() > 3]\n            avg_char_width\
          \ = (filtered_text.width / filtered_text.text.str.len()).mean()\n\n    \
          \        prev_paragraph, prev_line, prev_left_margin = 0, 0, 0\n\n     \
          \       for idx, line_data in current_block.iterrows():\n\n            \
          \    if prev_paragraph != line_data['par_num']:\n                    extracted_text\
          \   += '\\n'\n                    prev_paragraph   = line_data['par_num']\n\
          \                    prev_line        = line_data['line_num']\n        \
          \            prev_left_margin = 0\n\n                elif prev_line != line_data['line_num']:\n\
          \                    extracted_text   += '\\n'\n                    prev_line\
          \        = line_data['line_num']\n                    prev_left_margin =\
          \ 0\n\n                spaces_to_add = 0\n\n                if line_data['left']\
          \ / avg_char_width > prev_left_margin + 1:\n\n                    spaces_to_add\
          \  = int((line_data['left']) / avg_char_width) - prev_left_margin\n    \
          \                extracted_text += ' ' * spaces_to_add\n\n             \
          \   extracted_text   += line_data['text'] + ' '\n                prev_left_margin\
          \ += len(line_data['text']) + spaces_to_add + 1\n\n            extracted_text\
          \ += '\\n'\n\n    print(f'extracted_text : {extracted_text}')\n\n    with\
          \ open(pvc_filename.replace('.pdf', '.txt'), 'w') as file:\n\n        file.write(extracted_text)\n\
          \n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/tesseract
    exec-index-document:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - index_document
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef index_document(\n    milvus_uri        : str,\n    milvus_username\
          \   : str,\n    milvus_password   : str,\n    milvus_collection : str,\n\
          \    pvc_directory     : str,\n    pvc_filename      : str\n):\n    \"\"\
          \"\n    Indexes the document in Milvus.\n\n    Parameters:\n        - milvus_host\
          \       (str) : The host of the Milvus database.\n        - milvus_port\
          \       (str) : The port of the Milvus database.\n        - milvus_username\
          \   (str) : The username of the Milvus for authentication.\n        - milvus_password\
          \   (str) : The password of the Milvus for authentication.\n        - milvus_collection\
          \ (str) : The Milvus collection where the document will be indexed.\n  \
          \      - pvc_directory     (str) : The PVC directory where the file is saved.\n\
          \        - pvc_filename      (str) : The PVC filename in which the text\
          \ will be indexed.\n    \"\"\"\n\n    import os\n    from langchain_community.vectorstores.milvus\
          \ import Milvus\n    from sentence_transformers                   import\
          \ SentenceTransformer\n\n    pvc_filename_txt = os.path.join(pvc_directory,\
          \ pvc_filename)\n    pvc_filename_txt = '{0}_no_watermark.txt'.format(*os.path.splitext(pvc_filename_txt))\n\
          \n    with open(pvc_filename_txt) as file:\n\n        extracted_text = file.read()\n\
          \n    class EmbeddingFunctionWrapper:\n\n        def __init__(self, model):\n\
          \            self.model = model\n\n        def embed_query(self, query):\n\
          \            return self.model.encode(query)\n\n        def embed_documents(self,\
          \ documents):\n            return self.model.encode(documents)\n\n    embedding_model\
          \    = SentenceTransformer('all-MiniLM-L6-v2')\n    embedding_function =\
          \ EmbeddingFunctionWrapper(embedding_model)\n\n    milvus_connection_args\
          \ = {\n        'uri'      : milvus_uri,\n        'user'     : milvus_username,\n\
          \        'password' : milvus_password\n    }\n\n    milvus = Milvus(\n \
          \       connection_args    = milvus_connection_args,\n        collection_name\
          \    = milvus_collection,\n        embedding_function = embedding_function,\n\
          \        auto_id            = True,\n        drop_old           = False,\n\
          \        text_field         = 'page_content',\n        metadata_field  \
          \   = 'metadata'\n    )\n\n    words          = extracted_text.split()\n\
          \    parts          = []\n    current_part   = []\n    current_length =\
          \ 0\n    max_length     = 60000\n\n    for word in words:\n\n        if\
          \ current_length + len(word) + 1 <= max_length:\n\n            current_part.append(word)\n\
          \            current_length += len(word) + 1\n\n        else:\n\n      \
          \      parts.append(' '.join(current_part))\n            current_part  \
          \ = [word]\n            current_length = len(word) + 1\n\n    if current_part:\n\
          \n        parts.append(' '.join(current_part))\n\n    for index, part in\
          \ enumerate(parts):\n\n        metadata = {\n            'source' : pvc_filename,\n\
          \            'part'   : index\n        }\n\n        milvus.add_texts([part],\
          \ metadatas = [metadata])\n\n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/milvus
    exec-llm:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - llm
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef llm(\n    milvus_uri        : str,\n    milvus_username   : str,\n\
          \    milvus_password   : str,\n    milvus_collection : str,\n    inference_server\
          \  : str,\n    model_name        : str,\n    pvc_directory     : str,\n\
          \    pvc_filename      : str\n):\n    \"\"\"\n    Removes the watermark\
          \ from the pdf file.\n\n    Parameters:\n        - pvc_directory    (str)\
          \  : The PVC directory where the file is saved.\n        - pvc_filename\
          \     (str)  : The PVC filename in which the watermark will be removed.\n\
          \        - remove_watermark (bool) : Flag that indicates whether this step\
          \ should be executed or not.\n    \"\"\"\n\n    import os\n    from langchain.chat_models\
          \                   import ChatOpenAI\n    from langchain.callbacks.streaming_stdout\
          \    import StreamingStdOutCallbackHandler\n    from langchain.schema  \
          \                      import SystemMessage, HumanMessage\n    from langchain_community.vectorstores.milvus\
          \ import Milvus\n    from sentence_transformers                   import\
          \ SentenceTransformer\n\n    class EmbeddingFunctionWrapper:\n\n       \
          \ def __init__(self, model):\n            self.model = model\n\n       \
          \ def embed_query(self, query):\n            return self.model.encode(query)\n\
          \n        def embed_documents(self, documents):\n            return self.model.encode(documents)\n\
          \n    embedding_model    = SentenceTransformer('all-MiniLM-L6-v2')\n   \
          \ embedding_function = EmbeddingFunctionWrapper(embedding_model)\n\n   \
          \ milvus_connection_args = {\n        'uri'      : milvus_uri,\n       \
          \ 'user'     : milvus_username,\n        'password' : milvus_password\n\
          \    }\n\n    milvus = Milvus(\n        connection_args    = milvus_connection_args,\n\
          \        collection_name    = milvus_collection,\n        embedding_function\
          \ = embedding_function,\n        auto_id            = True,\n        drop_old\
          \           = False,\n        text_field         = 'page_content',\n   \
          \     metadata_field     = 'metadata'\n    )\n\n    llm = ChatOpenAI(\n\
          \        openai_api_key   = 'EMPTY',\n        openai_api_base  = f'{inference_server}/v1',\n\
          \        model_name       = model_name,\n        top_p            = 0.92,\n\
          \        temperature      = 0.01,\n        max_tokens       = 2048,\n  \
          \      presence_penalty = 1.03,\n        streaming        = True,\n    \
          \    callbacks        = [StreamingStdOutCallbackHandler()]\n    )\n\n  \
          \  query = \"\"\"\n        Converter as informa\xE7\xF5es para o formato\
          \ XML.\n    \"\"\"\n\n    documents = milvus.search(\n        query = query,\n\
          \        k     = 1,\n        search_type = 'similarity',\n        filter\
          \      = {\n            'source' : pvc_filename\n        }\n    )\n\n  \
          \  context_parts    = [document.page_content for document in documents]\n\
          \    context_combined = '\\n'.join(context_parts)\n\n    messages = [\n\
          \        SystemMessage(content = \"\"\"\n            Voc\xEA \xE9 um assistente\
          \ especialista em realizar convers\xF5es.\n            Seu \xFAnico objetivo\
          \ \xE9 realizar a convers\xE3o das informa\xE7\xF5es apresentadas para o\
          \ formato XML.\n            Sua resposta deve ser apenas o XML resultado,\
          \ e somente o XML, nenhum coment\xE1rio ou texto adicional.\n        \"\"\
          \"),\n        HumanMessage(content = f\"\"\"\n            Baseado nas informa\xE7\
          \xF5es abaixo, realize a convers\xE3o para o formato XML.\n            INPUT:\n\
          \            {context_combined}\n            XML OUTPUT:\n        \"\"\"\
          )\n        ]\n\n    response = llm.predict_messages(messages).content\n\
          \    print(response)\n\n    xml_filename = os.path.join(pvc_directory, pvc_filename)\n\
          \    xml_filename = xml_filename.replace('.pdf', '.xml')\n\n    with open(xml_filename,\
          \ 'w') as file:\n\n        file.write(response)\n\n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/llm
    exec-remove-watermark:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - remove_watermark
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef remove_watermark(\n    pvc_directory    : str,\n    pvc_filename\
          \     : str,\n    remove_watermark : bool\n):\n    \"\"\"\n    Removes the\
          \ watermark from the pdf file.\n\n    Parameters:\n        - pvc_directory\
          \    (str)  : The PVC directory where the file is saved.\n        - pvc_filename\
          \     (str)  : The PVC filename in which the watermark will be removed.\n\
          \        - remove_watermark (bool) : Flag that indicates whether this step\
          \ should be executed or not.\n    \"\"\"\n\n    import fitz\n    import\
          \ os\n\n    pvc_filename        = os.path.join(pvc_directory, pvc_filename)\n\
          \    pvc_filename_output = '{0}_no_watermark{1}'.format(*os.path.splitext(pvc_filename))\n\
          \n    document = fitz.open(pvc_filename)\n\n    if not remove_watermark:\n\
          \n        document.save(pvc_filename_output)\n        return\n\n    for\
          \ page in document:\n\n        images = page.get_images(full = True)\n\n\
          \        for image in images:\n\n            page.delete_image(image[0])\n\
          \n        annots = page.annots()\n\n        if annots:\n\n            for\
          \ annot in annots:\n\n                if 'Watermark' in annot.info.get('title',\
          \ ''):\n\n                    annot.set_Flags(fitz.ANNOT_HIDDEN)\n\n   \
          \     page.apply_redactions()\n\n    document.save(pvc_filename_output)\n\
          \n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/fitz
    exec-upload-document:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_document
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_document(\n    s3_service_name      : str,\n    s3_endpoint_url\
          \      : str,\n    s3_access_key_id     : str,\n    s3_secret_access_key\
          \ : str,\n    s3_region            : str,\n    s3_bucket            : str,\n\
          \    pvc_directory        : str,\n    pvc_filename         : str\n):\n \
          \   \"\"\"\n    Uploads the document to the s3 bucket.\n\n    Parameters:\n\
          \        - s3_service_name      (str) : The name of the s3 service. It should\
          \ be 's3'.\n        - s3_endpoint_url      (str) : The url of the s3 endpoint.\n\
          \        - s3_access_key_id     (str) : The access key id for authentication.\n\
          \        - s3_secret_access_key (str) : The secret access key for authentication.\n\
          \        - s3_region            (str) : The region where the s3 bucket is\
          \ located.\n        - s3_bucket            (str) : The s3 bucket where the\
          \ document will be uploaded.\n        - pvc_directory        (str) :\n \
          \       - pvc_filename         (str) :\n    \"\"\"\n\n    import boto3\n\
          \    import os\n\n    pvc_filename_xml = os.path.join(pvc_directory, pvc_filename)\n\
          \    pvc_filename_xml = pvc_filename_xml.replace('.pdf', '.xml')\n\n   \
          \ s3_client = boto3.client(\n        service_name          = s3_service_name,\n\
          \        endpoint_url          = s3_endpoint_url,\n        aws_access_key_id\
          \     = s3_access_key_id,\n        aws_secret_access_key = s3_secret_access_key,\n\
          \        region_name           = s3_region\n    )\n\n    s3_client.upload_file(pvc_filename_xml,\
          \ s3_bucket, pvc_filename.replace('.pdf', '.xml'))\n\n"
        image: image-registry.openshift-image-registry.svc:5000/demo-irpf/boto3
pipelineInfo:
  description: Convert IRPF .pdf to .xml
  name: irpf
root:
  dag:
    tasks:
      createpvc:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-createpvc
        inputs:
          parameters:
            access_modes:
              runtimeValue:
                constant:
                - ReadWriteOnce
            pvc_name_suffix:
              runtimeValue:
                constant: -pipeline-pvc
            size:
              runtimeValue:
                constant: 1Gi
            storage_class_name:
              componentInputParameter: storage_class_name
        taskInfo:
          name: createpvc
      deletepvc:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-deletepvc
        dependentTasks:
        - createpvc
        - upload-document
        inputs:
          parameters:
            pvc_name:
              taskOutputParameter:
                outputParameterKey: name
                producerTask: createpvc
        taskInfo:
          name: deletepvc
      download-document:
        cachingOptions: {}
        componentRef:
          name: comp-download-document
        dependentTasks:
        - createpvc
        inputs:
          parameters:
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            s3_access_key_id:
              componentInputParameter: s3_access_key_id
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint_url:
              componentInputParameter: s3_endpoint_url
            s3_filename:
              componentInputParameter: s3_filename
            s3_region:
              componentInputParameter: s3_region
            s3_secret_access_key:
              componentInputParameter: s3_secret_access_key
            s3_service_name:
              componentInputParameter: s3_service_name
        taskInfo:
          name: download-document
      extract-text:
        cachingOptions: {}
        componentRef:
          name: comp-extract-text
        dependentTasks:
        - createpvc
        - remove-watermark
        inputs:
          parameters:
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            pvc_filename:
              componentInputParameter: s3_filename
        taskInfo:
          name: extract-text
      index-document:
        cachingOptions: {}
        componentRef:
          name: comp-index-document
        dependentTasks:
        - createpvc
        - extract-text
        inputs:
          parameters:
            milvus_collection:
              componentInputParameter: milvus_collection
            milvus_password:
              componentInputParameter: milvus_password
            milvus_uri:
              componentInputParameter: milvus_uri
            milvus_username:
              componentInputParameter: milvus_username
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            pvc_filename:
              componentInputParameter: s3_filename
        taskInfo:
          name: index-document
      llm:
        cachingOptions: {}
        componentRef:
          name: comp-llm
        dependentTasks:
        - createpvc
        - index-document
        inputs:
          parameters:
            inference_server:
              componentInputParameter: inference_server
            milvus_collection:
              componentInputParameter: milvus_collection
            milvus_password:
              componentInputParameter: milvus_password
            milvus_uri:
              componentInputParameter: milvus_uri
            milvus_username:
              componentInputParameter: milvus_username
            model_name:
              componentInputParameter: model_name
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            pvc_filename:
              componentInputParameter: s3_filename
        taskInfo:
          name: llm
      remove-watermark:
        cachingOptions: {}
        componentRef:
          name: comp-remove-watermark
        dependentTasks:
        - createpvc
        - download-document
        inputs:
          parameters:
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            pvc_filename:
              componentInputParameter: s3_filename
            remove_watermark:
              componentInputParameter: remove_watermark
        taskInfo:
          name: remove-watermark
      upload-document:
        cachingOptions: {}
        componentRef:
          name: comp-upload-document
        dependentTasks:
        - createpvc
        - llm
        inputs:
          parameters:
            pvc_directory:
              runtimeValue:
                constant: /pipeline/irpf
            pvc_filename:
              componentInputParameter: s3_filename
            s3_access_key_id:
              componentInputParameter: s3_access_key_id
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint_url:
              componentInputParameter: s3_endpoint_url
            s3_region:
              componentInputParameter: s3_region
            s3_secret_access_key:
              componentInputParameter: s3_secret_access_key
            s3_service_name:
              componentInputParameter: s3_service_name
        taskInfo:
          name: upload-document
  inputDefinitions:
    parameters:
      inference_server:
        parameterType: STRING
      milvus_collection:
        parameterType: STRING
      milvus_password:
        parameterType: STRING
      milvus_uri:
        parameterType: STRING
      milvus_username:
        parameterType: STRING
      model_name:
        parameterType: STRING
      remove_watermark:
        parameterType: BOOLEAN
      s3_access_key_id:
        parameterType: STRING
      s3_bucket:
        parameterType: STRING
      s3_endpoint_url:
        parameterType: STRING
      s3_filename:
        parameterType: STRING
      s3_region:
        parameterType: STRING
      s3_secret_access_key:
        parameterType: STRING
      s3_service_name:
        parameterType: STRING
      storage_class_name:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.11.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-download-document:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-extract-text:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-index-document:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-llm:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-remove-watermark:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-upload-document:
          pvcMount:
          - mountPath: /pipeline/irpf
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
